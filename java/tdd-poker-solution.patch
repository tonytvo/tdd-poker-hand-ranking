diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/CardUtils.java b/tdd/pokerhands/java/src/main/java/pokerhand/CardUtils.java
new file mode 100644
index 0000000..5d6cbc7
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/CardUtils.java
@@ -0,0 +1,43 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+import pokerhand.model.Rank;
+import pokerhand.model.Suit;
+
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class CardUtils {
+    public static Map<Rank, Long> getRankCountMap(List<Card> cards) {
+        return cards.stream().collect(Collectors.groupingBy(Card::getRank, Collectors.counting()));
+    }
+
+    public static Map<Suit, Long> getSuitCountMap(List<Card> cards) {
+        return cards.stream().collect(Collectors.groupingBy(Card::getSuit, Collectors.counting()));
+    }
+
+    public static List<Rank> getRanksWithCount(List<Card> cards, int nCount) {
+        Map<Rank, Long> rankCountMap = getRankCountMap(cards);
+        return rankCountMap.entrySet().stream()
+                .filter(map -> {
+                    return map.getValue() == nCount;
+                })
+                .map(map -> map.getKey())
+                .collect(Collectors.toList());
+    }
+
+    public static int compareCardsBasedOnMultipleRankCountCriteria(int primaryRankCountCriteria, int secondaryRankCountCriteria, List<Card> thisCards, List<Card> thatCards) {
+        List<Rank> thisPrimaryRankCountCriteria = getRanksWithCount(thisCards, primaryRankCountCriteria);
+        List<Rank> thisSecondaryRankCountCriteria = getRanksWithCount(thisCards, secondaryRankCountCriteria);
+        List<Rank> thatPrimaryRankCountCriteria = getRanksWithCount(thatCards, primaryRankCountCriteria);
+        List<Rank> thatSecondaryRankCountCriteria = getRanksWithCount(thatCards, secondaryRankCountCriteria);
+        if (CompareUtils.compareComparables(thisPrimaryRankCountCriteria, thatPrimaryRankCountCriteria) != 0) {
+            return CompareUtils.compareComparables(thisPrimaryRankCountCriteria, thatPrimaryRankCountCriteria);
+        }
+        return CompareUtils.compareComparables(thisSecondaryRankCountCriteria, thatSecondaryRankCountCriteria);
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/CompareUtils.java b/tdd/pokerhands/java/src/main/java/pokerhand/CompareUtils.java
new file mode 100644
index 0000000..f9af513
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/CompareUtils.java
@@ -0,0 +1,28 @@
+package pokerhand;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class CompareUtils {
+    public static int compareComparables(List<? extends Comparable> thisComparables, List<? extends Comparable> thatComparables) {
+        List<? extends Comparable> thisSortedComparable = new ArrayList<>(thisComparables);
+        List<? extends Comparable> thatSortedComparables = new ArrayList<>(thatComparables);
+        Collections.sort(thisSortedComparable, Collections.reverseOrder());
+        Collections.sort(thatSortedComparables, Collections.reverseOrder());
+        int comparableIndex = 0;
+        for(Comparable comparable: thisSortedComparable) {
+            Comparable thatComparable = thatSortedComparables.get(comparableIndex);
+            comparableIndex++;
+            if (comparable.compareTo(thatComparable) == 0) {
+                continue;
+            } else {
+                return comparable.compareTo(thatComparable);
+            }
+        }
+        return 0;
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/Flush.java b/tdd/pokerhands/java/src/main/java/pokerhand/Flush.java
new file mode 100644
index 0000000..bb372f5
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/Flush.java
@@ -0,0 +1,34 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+
+import static java.util.Arrays.asList;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class Flush implements HandType {
+    private final List<Card> cards;
+
+    public Flush(List<Card> cards) {
+        this.cards = new ArrayList<>(cards);
+    }
+
+    public Flush(Card... cards) {
+        this.cards = asList(cards);
+    }
+
+    @Override
+    public int getHandTypeOrdinal() {
+        return 6;
+    }
+
+    @Override
+    public int compareTo(HandType o) {
+        return CompareUtils.compareComparables(cards, ((Flush)o).cards);
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/FourOfAKind.java b/tdd/pokerhands/java/src/main/java/pokerhand/FourOfAKind.java
new file mode 100644
index 0000000..941b9b2
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/FourOfAKind.java
@@ -0,0 +1,34 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static java.util.Arrays.asList;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class FourOfAKind implements HandType {
+    private final List<Card> cards;
+
+    public FourOfAKind(List<Card> cards) {
+        this.cards = new ArrayList<>(cards);
+    }
+
+    public FourOfAKind(Card... cards) {
+        this.cards = asList(cards);
+    }
+
+    @Override
+    public int getHandTypeOrdinal() {
+        return 8;
+    }
+
+    @Override
+    public int compareTo(HandType o) {
+        return CardUtils.compareCardsBasedOnMultipleRankCountCriteria(4, 1, this.cards, ((FourOfAKind) o).cards);
+    }
+
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/FullHouse.java b/tdd/pokerhands/java/src/main/java/pokerhand/FullHouse.java
new file mode 100644
index 0000000..7e773d8
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/FullHouse.java
@@ -0,0 +1,33 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static java.util.Arrays.asList;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class FullHouse implements HandType {
+    private final List<Card> cards;
+
+    public FullHouse(List<Card> cards) {
+        this.cards = new ArrayList<>(cards);
+    }
+
+    public FullHouse(Card... cards) {
+        this.cards = asList(cards);
+    }
+
+    @Override
+    public int getHandTypeOrdinal() {
+        return 7;
+    }
+
+    @Override
+    public int compareTo(HandType o) {
+        return CardUtils.compareCardsBasedOnMultipleRankCountCriteria(3, 2, this.cards, ((FullHouse) o).cards);
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/HandType.java b/tdd/pokerhands/java/src/main/java/pokerhand/HandType.java
new file mode 100644
index 0000000..907527c
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/HandType.java
@@ -0,0 +1,8 @@
+package pokerhand;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public interface HandType extends Comparable<HandType> {
+    public int getHandTypeOrdinal();
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/HighCard.java b/tdd/pokerhands/java/src/main/java/pokerhand/HighCard.java
new file mode 100644
index 0000000..8510075
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/HighCard.java
@@ -0,0 +1,35 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import static java.util.Arrays.asList;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class HighCard implements HandType {
+
+    private final List<Card> cards;
+
+    public HighCard(List<Card> pokerCards) {
+        this.cards = new ArrayList<>(pokerCards);
+    }
+
+    public HighCard(Card... pokerCards) {
+        this.cards = asList(pokerCards);
+    }
+
+    @Override
+    public int compareTo(HandType otherHandType) {
+        return CompareUtils.compareComparables(cards, ((HighCard)otherHandType).cards);
+    }
+
+    @Override
+    public int getHandTypeOrdinal() {
+        return 0;
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/PokerHand.java b/tdd/pokerhands/java/src/main/java/pokerhand/PokerHand.java
new file mode 100644
index 0000000..6bd30a5
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/PokerHand.java
@@ -0,0 +1,120 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+import pokerhand.model.Rank;
+import pokerhand.model.Suit;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+import static java.util.Arrays.asList;
+
+public class PokerHand implements Comparable<PokerHand> {
+
+    private final List<Card> cards;
+
+    public PokerHand(Card... pokerCards) {
+        this.cards = asList(pokerCards);
+    }
+
+    @Override
+    public int compareTo(PokerHand otherHand) {
+        HandType thisHandType = getHandType();
+        HandType thatHandType = otherHand.getHandType();
+        if (thisHandType.getHandTypeOrdinal() > thatHandType.getHandTypeOrdinal()) {
+            return 1;
+        }
+        if (thisHandType.getHandTypeOrdinal() < thatHandType.getHandTypeOrdinal()) {
+            return -1;
+        }
+        return thisHandType.compareTo(thatHandType);
+    }
+
+    protected HandType getHandType() {
+        if (isStraightFlush()) {
+            return new StraightFlush(cards);
+        }
+        if (isFourOfAKind()) {
+            return new FourOfAKind(cards);
+        }
+        if (isFullHouse()) {
+            return new FullHouse(cards);
+        }
+        if (isFlush()) {
+            return new Flush(cards);
+        }
+        if (isStraight()) {
+            return new Straight(cards);
+        }
+        if (isThreeOfAKind()) {
+            return new ThreeOfAKind(cards);
+        }
+        if (hasTwoPairs()) {
+            return new TwoPair(cards);
+        }
+        if (hasPair()) {
+            return new PokerPair(cards);
+        }
+        return new HighCard(cards);
+    }
+
+    protected boolean hasPair() {
+        return CardUtils.getRanksWithCount(cards, 2).size()==1;
+    }
+
+    public boolean isStraight() {
+        List<Card> sortedCards = new ArrayList<>(cards);
+        Collections.sort(sortedCards);
+
+        Card prevCard = null;
+        for (Card card: sortedCards) {
+            if (prevCard == null) {
+                prevCard = card;
+                continue;
+            }
+            if (Math.abs(card.getRank().getValue() - prevCard.getRank().getValue()) == 9) {
+                prevCard = card;
+                continue;
+            }
+            if (Math.abs(card.getRank().getValue() - prevCard.getRank().getValue()) == 1) {
+                prevCard = card;
+                continue;
+            } else {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    public boolean isFlush() {
+        Map<Suit, Long> suitCountMap = CardUtils.getSuitCountMap(cards);
+        List<Suit> flushSuit = suitCountMap.entrySet().stream()
+                .filter(map -> map.getValue() == 5)
+                .map(map -> map.getKey())
+                .collect(Collectors.toList());
+        return flushSuit.size()==1;
+    }
+
+    public boolean isStraightFlush() {
+        return isStraight() && isFlush();
+    }
+
+    public boolean isFourOfAKind() {
+        return CardUtils.getRanksWithCount(this.cards, 4).size() == 1;
+    }
+
+    public boolean isThreeOfAKind() {
+        return CardUtils.getRanksWithCount(this.cards, 3).size() == 1;
+    }
+
+    public boolean isFullHouse() {
+        return isThreeOfAKind() && hasPair();
+    }
+
+    public boolean hasTwoPairs() {
+        return CardUtils.getRanksWithCount(this.cards, 2).size() == 2;
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/PokerPair.java b/tdd/pokerhands/java/src/main/java/pokerhand/PokerPair.java
new file mode 100644
index 0000000..1b428ee
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/PokerPair.java
@@ -0,0 +1,36 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+import pokerhand.model.Rank;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+import static java.util.Arrays.asList;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class PokerPair implements HandType {
+    private final List<Card> cards;
+
+    public PokerPair(List<Card> pokerCards) {
+        this.cards = new ArrayList<>(pokerCards);
+    }
+
+    public PokerPair(Card... pokerCards) {
+        this.cards = asList(pokerCards);
+    }
+
+    @Override
+    public int compareTo(HandType o) {
+        return CardUtils.compareCardsBasedOnMultipleRankCountCriteria(2, 1, this.cards, ((PokerPair) o).cards);
+    }
+
+    @Override
+    public int getHandTypeOrdinal() {
+        return 2;
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/Straight.java b/tdd/pokerhands/java/src/main/java/pokerhand/Straight.java
new file mode 100644
index 0000000..9bc7236
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/Straight.java
@@ -0,0 +1,50 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import static java.util.Arrays.asList;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class Straight implements HandType {
+
+    private final List<Card> cards;
+
+    public Straight(List<Card> pokerCards) {
+        this.cards = new ArrayList<>(pokerCards);
+    }
+
+    public Straight(Card... pokerCards) {
+        this.cards = asList(pokerCards);
+    }
+
+    @Override
+    public int compareTo(HandType o) {
+        Card thisHighestCard = getHighestStraightCard();
+        Card thatHighestCard = ((Straight)o).getHighestStraightCard();
+        return thisHighestCard.compareTo(thatHighestCard);
+    }
+
+    private Card getHighestStraightCard() {
+        List<Card> thisSortedCards = new ArrayList<>(cards);
+        Collections.sort(thisSortedCards, Collections.reverseOrder());
+        if (isLowerAceStraight(thisSortedCards)) {
+            return thisSortedCards.get(1);
+        }
+        return thisSortedCards.get(0);
+    }
+
+    private boolean isLowerAceStraight(List<Card> thisSortedCards) {
+        return Math.abs(thisSortedCards.get(0).getRank().getValue() - thisSortedCards.get(1).getRank().getValue()) == 9;
+    }
+
+    @Override
+    public int getHandTypeOrdinal() {
+        return 5;
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/StraightFlush.java b/tdd/pokerhands/java/src/main/java/pokerhand/StraightFlush.java
new file mode 100644
index 0000000..c1e1eed
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/StraightFlush.java
@@ -0,0 +1,30 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+
+import java.util.List;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class StraightFlush implements HandType {
+    private final Straight straight;
+
+    public StraightFlush(List<Card> cards) {
+        this.straight = new Straight(cards);
+    }
+
+    public StraightFlush(Card... cards) {
+        this.straight = new Straight(cards);
+    }
+
+    @Override
+    public int getHandTypeOrdinal() {
+        return 9;
+    }
+
+    @Override
+    public int compareTo(HandType o) {
+        return straight.compareTo(((StraightFlush)o).straight);
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/ThreeOfAKind.java b/tdd/pokerhands/java/src/main/java/pokerhand/ThreeOfAKind.java
new file mode 100644
index 0000000..8b4ec7b
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/ThreeOfAKind.java
@@ -0,0 +1,34 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+import pokerhand.model.Rank;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static java.util.Arrays.asList;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class ThreeOfAKind implements HandType {
+    private final List<Card> cards;
+
+    public ThreeOfAKind(List<Card> cards) {
+        this.cards = new ArrayList<>(cards);
+    }
+
+    public ThreeOfAKind(Card... cards) {
+        this.cards = asList(cards);
+    }
+
+    @Override
+    public int getHandTypeOrdinal() {
+        return 4;
+    }
+
+    @Override
+    public int compareTo(HandType o) {
+        return CardUtils.compareCardsBasedOnMultipleRankCountCriteria(3, 1, this.cards, ((ThreeOfAKind) o).cards);
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/TwoPair.java b/tdd/pokerhands/java/src/main/java/pokerhand/TwoPair.java
new file mode 100644
index 0000000..ccfa070
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/TwoPair.java
@@ -0,0 +1,33 @@
+package pokerhand;
+
+import pokerhand.model.Card;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static java.util.Arrays.asList;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class TwoPair implements HandType {
+    private final List<Card> cards;
+
+    public TwoPair(List<Card> cards) {
+        this.cards = new ArrayList<>(cards);
+    }
+
+    public TwoPair(Card... cards) {
+        this.cards = asList(cards);
+    }
+
+    @Override
+    public int getHandTypeOrdinal() {
+        return 3;
+    }
+
+    @Override
+    public int compareTo(HandType o) {
+        return CardUtils.compareCardsBasedOnMultipleRankCountCriteria(2, 1, this.cards, ((TwoPair) o).cards);
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/model/Card.java b/tdd/pokerhands/java/src/main/java/pokerhand/model/Card.java
new file mode 100644
index 0000000..f50230b
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/model/Card.java
@@ -0,0 +1,128 @@
+package pokerhand.model;
+
+import static pokerhand.model.Rank.*;
+import static pokerhand.model.Suit.*;
+
+/**
+ * Created by tvo on 8/27/16.
+ */
+public class Card implements Comparable<Card> {
+    public static final Card TWO_HEART = new Card(TWO, HEART);
+    public static final Card TWO_CLUB = new Card(TWO, CLUB);
+    public static final Card TWO_DIAMOND = new Card(TWO, DIAMOND);
+    public static final Card TWO_SPADE = new Card(TWO, SPADE);
+
+    public static final Card THREE_HEART = new Card(THREE, HEART);
+    public static final Card THREE_CLUB = new Card(THREE, CLUB);
+    public static final Card THREE_DIAMOND = new Card(THREE, DIAMOND);
+    public static final Card THREE_SPADE = new Card(THREE, SPADE);
+
+    public static final Card FOUR_HEART = new Card(FOUR, HEART);
+    public static final Card FOUR_CLUB = new Card(FOUR, CLUB);
+    public static final Card FOUR_DIAMOND = new Card(FOUR, DIAMOND);
+    public static final Card FOUR_SPADE = new Card(FOUR, SPADE);
+
+    public static final Card FIVE_HEART = new Card(FIVE, HEART);
+    public static final Card FIVE_CLUB = new Card(FIVE, CLUB);
+    public static final Card FIVE_DIAMOND = new Card(FIVE, DIAMOND);
+    public static final Card FIVE_SPADE = new Card(FIVE, SPADE);
+
+    public static final Card SIX_HEART = new Card(SIX, HEART);
+    public static final Card SIX_CLUB = new Card(SIX, CLUB);
+    public static final Card SIX_DIAMOND = new Card(SIX, DIAMOND);
+    public static final Card SIX_SPADE = new Card(SIX, SPADE);
+
+    public static final Card SEVEN_HEART = new Card(SEVEN, HEART);
+    public static final Card SEVEN_CLUB = new Card(SEVEN, CLUB);
+    public static final Card SEVEN_DIAMOND = new Card(SEVEN, DIAMOND);
+    public static final Card SEVEN_SPADE = new Card(SEVEN, SPADE);
+
+    public static final Card EIGHT_HEART = new Card(EIGHT, HEART);
+    public static final Card EIGHT_CLUB = new Card(EIGHT, CLUB);
+    public static final Card EIGHT_DIAMOND = new Card(EIGHT, DIAMOND);
+    public static final Card EIGHT_SPADE = new Card(EIGHT, SPADE);
+
+    public static final Card NINE_HEART = new Card(NINE, HEART);
+    public static final Card NINE_CLUB = new Card(NINE, CLUB);
+    public static final Card NINE_DIAMOND = new Card(NINE, DIAMOND);
+    public static final Card NINE_SPADE = new Card(NINE, SPADE);
+
+    public static final Card TEN_HEART = new Card(TEN, HEART);
+    public static final Card TEN_CLUB = new Card(TEN, CLUB);
+    public static final Card TEN_DIAMOND = new Card(TEN, DIAMOND);
+    public static final Card TEN_SPADE = new Card(TEN, SPADE);
+
+    public static final Card JACK_HEART = new Card(JACK, HEART);
+    public static final Card JACK_CLUB = new Card(JACK, CLUB);
+    public static final Card JACK_DIAMOND = new Card(JACK, DIAMOND);
+    public static final Card JACK_SPADE = new Card(JACK, SPADE);
+
+    public static final Card QUEEN_HEART = new Card(QUEEN, HEART);
+    public static final Card QUEEN_CLUB = new Card(QUEEN, CLUB);
+    public static final Card QUEEN_DIAMOND = new Card(QUEEN, DIAMOND);
+    public static final Card QUEEN_SPADE = new Card(QUEEN, SPADE);
+
+    public static final Card KING_HEART = new Card(KING, HEART);
+    public static final Card KING_CLUB = new Card(KING, CLUB);
+    public static final Card KING_DIAMOND = new Card(KING, DIAMOND);
+    public static final Card KING_SPADE = new Card(KING, SPADE);
+
+    public static final Card ACE_HEART = new Card(ACE, HEART);
+    public static final Card ACE_CLUB = new Card(ACE, CLUB);
+    public static final Card ACE_DIAMOND = new Card(ACE, DIAMOND);
+    public static final Card ACE_SPADE = new Card(ACE, SPADE);
+
+    private final Rank rank;
+    private final Suit suit;
+
+    public Card(Rank rank, Suit suit) {
+        this.rank = rank;
+        this.suit = suit;
+    }
+
+    @Override
+    public String toString() {
+        return "Card{" + rank +
+                ", " + suit +
+                '}';
+    }
+
+    public Rank getRank() {
+        return this.rank;
+    }
+
+    public Suit getSuit() {
+        return suit;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        Card card = (Card) o;
+
+        if (rank != card.rank) return false;
+        if (suit != card.suit) return false;
+
+        return true;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = rank.hashCode();
+        result = 31 * result + suit.hashCode();
+        return result;
+    }
+
+    @Override
+    public int compareTo(Card otherCard) {
+        if (this.getRank().getValue() > otherCard.getRank().getValue()) {
+            return 1;
+        }
+        if (this.getRank().getValue() < otherCard.getRank().getValue()) {
+            return -1;
+        }
+        return 0;
+    }
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/model/Rank.java b/tdd/pokerhands/java/src/main/java/pokerhand/model/Rank.java
new file mode 100644
index 0000000..5aa5b85
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/model/Rank.java
@@ -0,0 +1,19 @@
+package pokerhand.model;
+
+/**
+ * Created by tvo on 8/27/16.
+ */
+public enum Rank implements Comparable<Rank> {
+    TWO(2), THREE(3), FOUR(4), FIVE(5), SIX(6), SEVEN(7), EIGHT(8), NINE(9), TEN(10), JACK(11), QUEEN(12), KING(13), ACE(14);
+
+    private int value;
+
+    private Rank(int value) {
+        this.value = value;
+    }
+
+    public int getValue() {
+        return this.value;
+    }
+
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhand/model/Suit.java b/tdd/pokerhands/java/src/main/java/pokerhand/model/Suit.java
new file mode 100644
index 0000000..614cf92
--- /dev/null
+++ b/tdd/pokerhands/java/src/main/java/pokerhand/model/Suit.java
@@ -0,0 +1,8 @@
+package pokerhand.model;
+
+/**
+ * Created by tvo on 8/27/16.
+ */
+public enum Suit {
+    HEART, DIAMOND, SPADE, CLUB
+}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhands/PokerHands.java b/tdd/pokerhands/java/src/main/java/pokerhands/PokerHands.java
deleted file mode 100644
index d615aad..0000000
--- a/tdd/pokerhands/java/src/main/java/pokerhands/PokerHands.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package pokerhands;
-
-public class PokerHands {
-
-}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhands/model/Card.java b/tdd/pokerhands/java/src/main/java/pokerhands/model/Card.java
deleted file mode 100644
index cc6effb..0000000
--- a/tdd/pokerhands/java/src/main/java/pokerhands/model/Card.java
+++ /dev/null
@@ -1,117 +0,0 @@
-package pokerhands.model;
-
-import static pokerhands.model.Rank.*;
-import static pokerhands.model.Suit.*;
-
-/**
- * Created by tvo on 8/27/16.
- */
-public class Card {
-    public static final Card TWO_HEART = new Card(TWO, HEART);
-    public static final Card TWO_CLUB = new Card(TWO, CLUB);
-    public static final Card TWO_DIAMOND = new Card(TWO, DIAMOND);
-    public static final Card TWO_SPADE = new Card(TWO, SPADE);
-
-    public static final Card THREE_HEART = new Card(THREE, HEART);
-    public static final Card THREE_CLUB = new Card(THREE, CLUB);
-    public static final Card THREE_DIAMOND = new Card(THREE, DIAMOND);
-    public static final Card THREE_SPADE = new Card(THREE, SPADE);
-
-    public static final Card FOUR_HEART = new Card(FOUR, HEART);
-    public static final Card FOUR_CLUB = new Card(FOUR, CLUB);
-    public static final Card FOUR_DIAMOND = new Card(FOUR, DIAMOND);
-    public static final Card FOUR_SPADE = new Card(FOUR, SPADE);
-
-    public static final Card FIVE_HEART = new Card(FIVE, HEART);
-    public static final Card FIVE_CLUB = new Card(FIVE, CLUB);
-    public static final Card FIVE_DIAMOND = new Card(FIVE, DIAMOND);
-    public static final Card FIVE_SPADE = new Card(FIVE, SPADE);
-
-    public static final Card SIX_HEART = new Card(SIX, HEART);
-    public static final Card SIX_CLUB = new Card(SIX, CLUB);
-    public static final Card SIX_DIAMOND = new Card(SIX, DIAMOND);
-    public static final Card SIX_SPADE = new Card(SIX, SPADE);
-
-    public static final Card SEVEN_HEART = new Card(SEVEN, HEART);
-    public static final Card SEVEN_CLUB = new Card(SEVEN, CLUB);
-    public static final Card SEVEN_DIAMOND = new Card(SEVEN, DIAMOND);
-    public static final Card SEVEN_SPADE = new Card(SEVEN, SPADE);
-
-    public static final Card EIGHT_HEART = new Card(EIGHT, HEART);
-    public static final Card EIGHT_CLUB = new Card(EIGHT, CLUB);
-    public static final Card EIGHT_DIAMOND = new Card(EIGHT, DIAMOND);
-    public static final Card EIGHT_SPADE = new Card(EIGHT, SPADE);
-
-    public static final Card NINE_HEART = new Card(NINE, HEART);
-    public static final Card NINE_CLUB = new Card(NINE, CLUB);
-    public static final Card NINE_DIAMOND = new Card(NINE, DIAMOND);
-    public static final Card NINE_SPADE = new Card(NINE, SPADE);
-
-    public static final Card TEN_HEART = new Card(TEN, HEART);
-    public static final Card TEN_CLUB = new Card(TEN, CLUB);
-    public static final Card TEN_DIAMOND = new Card(TEN, DIAMOND);
-    public static final Card TEN_SPADE = new Card(TEN, SPADE);
-
-    public static final Card JACK_HEART = new Card(JACK, HEART);
-    public static final Card JACK_CLUB = new Card(JACK, CLUB);
-    public static final Card JACK_DIAMOND = new Card(JACK, DIAMOND);
-    public static final Card JACK_SPADE = new Card(JACK, SPADE);
-
-    public static final Card QUEEN_HEART = new Card(QUEEN, HEART);
-    public static final Card QUEEN_CLUB = new Card(QUEEN, CLUB);
-    public static final Card QUEEN_DIAMOND = new Card(QUEEN, DIAMOND);
-    public static final Card QUEEN_SPADE = new Card(QUEEN, SPADE);
-
-    public static final Card KING_HEART = new Card(KING, HEART);
-    public static final Card KING_CLUB = new Card(KING, CLUB);
-    public static final Card KING_DIAMOND = new Card(KING, DIAMOND);
-    public static final Card KING_SPADE = new Card(KING, SPADE);
-
-    public static final Card ACE_HEART = new Card(ACE, HEART);
-    public static final Card ACE_CLUB = new Card(ACE, CLUB);
-    public static final Card ACE_DIAMOND = new Card(ACE, DIAMOND);
-    public static final Card ACE_SPADE = new Card(ACE, SPADE);
-
-    private final Rank rank;
-    private final Suit suit;
-
-    public Card(Rank rank, Suit suit) {
-        this.rank = rank;
-        this.suit = suit;
-    }
-
-    @Override
-    public String toString() {
-        return "Card{" + rank +
-                ", " + suit +
-                '}';
-    }
-
-    public Rank getRank() {
-        return this.rank;
-    }
-
-    public Suit getSuit() {
-        return suit;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        Card card = (Card) o;
-
-        if (rank != card.rank) return false;
-        if (suit != card.suit) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        int result = rank.hashCode();
-        result = 31 * result + suit.hashCode();
-        return result;
-    }
-}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhands/model/Rank.java b/tdd/pokerhands/java/src/main/java/pokerhands/model/Rank.java
deleted file mode 100644
index 09d954f..0000000
--- a/tdd/pokerhands/java/src/main/java/pokerhands/model/Rank.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package pokerhands.model;
-
-/**
- * Created by tvo on 8/27/16.
- */
-public enum Rank {
-    TWO(2), THREE(3), FOUR(4), FIVE(5), SIX(6), SEVEN(7), EIGHT(8), NINE(9), TEN(10), JACK(11), QUEEN(12), KING(13), ACE(14);
-
-    private int value;
-
-    private Rank(int value) {
-        this.value = value;
-    }
-
-    public int getValue() {
-        return this.value;
-    }
-
-}
diff --git a/tdd/pokerhands/java/src/main/java/pokerhands/model/Suit.java b/tdd/pokerhands/java/src/main/java/pokerhands/model/Suit.java
deleted file mode 100644
index 8d8542d..0000000
--- a/tdd/pokerhands/java/src/main/java/pokerhands/model/Suit.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package pokerhands.model;
-
-/**
- * Created by tvo on 8/27/16.
- */
-public enum Suit {
-    HEART, DIAMOND, SPADE, CLUB
-}
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/FlushTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/FlushTest.java
new file mode 100644
index 0000000..4459815
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/FlushTest.java
@@ -0,0 +1,27 @@
+package pokerhand;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static pokerhand.model.Card.*;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class FlushTest {
+    @Test
+    public void shouldReturnSameFlush() throws Exception {
+        HandType firstHand = new Flush(TWO_DIAMOND, THREE_DIAMOND, FOUR_DIAMOND, FIVE_DIAMOND, EIGHT_DIAMOND);
+        HandType secondHand = new Flush(TWO_DIAMOND, THREE_DIAMOND, FOUR_DIAMOND, FIVE_DIAMOND, EIGHT_DIAMOND);
+        int ordinal = firstHand.compareTo(secondHand);
+        assertEquals(0, ordinal);
+    }
+
+    @Test
+    public void tenKickertFlushShouldBeHigherNineKickerFlush() throws Exception {
+        HandType firstHand = new Flush(TWO_DIAMOND, THREE_DIAMOND, FOUR_DIAMOND, FIVE_DIAMOND, TEN_DIAMOND);
+        HandType secondHand = new Flush(TWO_HEART, THREE_HEART, FOUR_HEART, FIVE_HEART, NINE_HEART);
+        int ordinal = firstHand.compareTo(secondHand);
+        assertEquals(1, ordinal);
+    }
+}
\ No newline at end of file
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/FourOfAKindTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/FourOfAKindTest.java
new file mode 100644
index 0000000..44e8aee
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/FourOfAKindTest.java
@@ -0,0 +1,36 @@
+package pokerhand;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static pokerhand.model.Card.*;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class FourOfAKindTest {
+
+    @Test
+    public void shouldReturnSameFourOfAKind() throws Exception {
+        HandType firstFour2s = new FourOfAKind(TWO_HEART, TWO_CLUB, TWO_DIAMOND, TWO_SPADE, SIX_SPADE);
+        HandType secondFour2s = new FourOfAKind(TWO_HEART, TWO_CLUB, TWO_DIAMOND, TWO_SPADE, SIX_SPADE);
+        int ordinal = firstFour2s.compareTo(secondFour2s);
+        assertEquals(0, ordinal);
+    }
+
+    @Test
+    public void three4sShouldBeHigherThan42s() throws Exception {
+        HandType threeFours = new FourOfAKind(THREE_CLUB, THREE_HEART, THREE_DIAMOND, THREE_SPADE, SIX_SPADE);
+        HandType secondFour2s = new FourOfAKind(TWO_HEART, TWO_CLUB, TWO_DIAMOND, TWO_SPADE, SIX_SPADE);
+        int ordinal = threeFours.compareTo(secondFour2s);
+        assertEquals(1, ordinal);
+    }
+
+    @Test
+    public void tenKickerShouldBeHigherThanNiceKicker() throws Exception {
+        HandType firstFourOfAKind = new FourOfAKind(THREE_CLUB, THREE_HEART, THREE_DIAMOND, THREE_SPADE, TEN_SPADE);
+        HandType secondFourOfAKind = new FourOfAKind(THREE_CLUB, THREE_HEART, THREE_DIAMOND, THREE_SPADE, NINE_HEART);
+        int ordinal = firstFourOfAKind.compareTo(secondFourOfAKind);
+        assertEquals(1, ordinal);
+    }
+}
\ No newline at end of file
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/FullHouseTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/FullHouseTest.java
new file mode 100644
index 0000000..6f01740
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/FullHouseTest.java
@@ -0,0 +1,35 @@
+package pokerhand;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static pokerhand.model.Card.*;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class FullHouseTest {
+    @Test
+    public void shouldReturnSameFullHouse() throws Exception {
+        HandType firstFullHouse = new FullHouse(TWO_HEART, TWO_CLUB, TWO_DIAMOND, SEVEN_CLUB, SEVEN_DIAMOND);
+        HandType secondFullHouse = new FullHouse(TWO_HEART, TWO_CLUB, TWO_DIAMOND, SEVEN_CLUB, SEVEN_DIAMOND);
+        int ordinal = firstFullHouse.compareTo(secondFullHouse);
+        assertEquals(0, ordinal);
+    }
+
+    @Test
+    public void three3sShouldBeHigherThan32s() throws Exception {
+        HandType threethree = new FullHouse(THREE_CLUB, THREE_HEART, THREE_DIAMOND, SEVEN_CLUB, SEVEN_DIAMOND);
+        HandType three2s = new FullHouse(TWO_HEART, TWO_CLUB, TWO_DIAMOND, SEVEN_CLUB, SEVEN_DIAMOND);
+        int ordinal = threethree.compareTo(three2s);
+        assertEquals(1, ordinal);
+    }
+
+    @Test
+    public void sevenPairKickerShouldBeHigherThan6PairKicker() throws Exception {
+        HandType sevenPairKicker = new FullHouse(THREE_CLUB, THREE_HEART, THREE_DIAMOND, SEVEN_CLUB, SEVEN_DIAMOND);
+        HandType sixPairKicker = new FullHouse(THREE_CLUB, THREE_HEART, THREE_DIAMOND, SIX_CLUB, SIX_DIAMOND);
+        int ordinal = sevenPairKicker.compareTo(sixPairKicker);
+        assertEquals(1, ordinal);
+    }
+}
\ No newline at end of file
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/HighCardTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/HighCardTest.java
new file mode 100644
index 0000000..e5f467e
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/HighCardTest.java
@@ -0,0 +1,21 @@
+package pokerhand;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static pokerhand.model.Card.*;
+import static pokerhand.model.Card.THREE_CLUB;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class HighCardTest {
+
+    @Test
+    public void ten8642KickerShouldBeSameAs810642() throws Exception {
+        HandType firstHand = new HighCard(TEN_CLUB, EIGHT_DIAMOND, SIX_HEART, FOUR_SPADE, TWO_DIAMOND);
+        HandType secondHand = new HighCard(EIGHT_DIAMOND, TEN_HEART, SIX_HEART, FOUR_SPADE, TWO_DIAMOND);
+        int ordinal = firstHand.compareTo(secondHand);
+        assertEquals("ten kicker should be eequals to 10 kicker", 0, ordinal);
+    }
+}
\ No newline at end of file
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/PokerHandTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/PokerHandTest.java
new file mode 100644
index 0000000..e4857ec
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/PokerHandTest.java
@@ -0,0 +1,133 @@
+package pokerhand;
+
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static pokerhand.model.Card.*;
+
+/**
+ * Created by Tony on 1/15/2016.
+ */
+public class PokerHandTest {
+
+    @Test
+    public void pairOf2sShouldReturnTrue() throws Exception {
+        PokerHand firstHand = new PokerHand(JACK_CLUB, EIGHT_DIAMOND, SIX_HEART, TWO_HEART, TWO_DIAMOND);
+        boolean hasPair = firstHand.hasPair();
+        assertEquals("pair of 3 should be higher than pair of 2", true, hasPair);
+    }
+
+    @Test
+    public void twoTo6StraightShouldReturnTrue() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, THREE_CLUB, FOUR_SPADE, FIVE_DIAMOND, SIX_HEART);
+        boolean isStraight = firstHand.isStraight();
+        assertEquals(true, isStraight);
+    }
+
+    @Test
+    public void aceTo5StraightShouldReturnTrue() throws Exception {
+        PokerHand firstHand = new PokerHand(ACE_CLUB, TWO_DIAMOND, THREE_CLUB, FOUR_SPADE, FIVE_DIAMOND);
+        boolean isStraight = firstHand.isStraight();
+        assertEquals(true, isStraight);
+    }
+
+    @Test
+    public void straightShouldBeHigherThanHighCard() throws Exception {
+        PokerHand straightHand = new PokerHand(TWO_DIAMOND, THREE_CLUB, FOUR_SPADE, FIVE_DIAMOND, SIX_HEART);
+        PokerHand highCardHand = new PokerHand(JACK_CLUB, THREE_CLUB, FOUR_SPADE, FIVE_DIAMOND, SIX_HEART);
+        int ordinal = straightHand.compareTo(highCardHand);
+        assertEquals(1, ordinal);
+    }
+
+    @Test
+    public void pairShouldBeLowerThanStraight() throws Exception {
+        PokerHand straightHand = new PokerHand(TWO_DIAMOND, THREE_CLUB, FOUR_SPADE, FIVE_DIAMOND, SIX_HEART);
+        PokerHand pairHand = new PokerHand(JACK_CLUB, THREE_CLUB, THREE_CLUB, FIVE_DIAMOND, SIX_HEART);
+        int ordinal = pairHand.compareTo(straightHand);
+        assertEquals(-1, ordinal);
+    }
+
+    @Test
+    public void diamondFlushShouldReturnTrue() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, THREE_DIAMOND, FOUR_DIAMOND, FIVE_DIAMOND, EIGHT_DIAMOND);
+        boolean isFlush = firstHand.isFlush();
+        assertEquals(true, isFlush);
+    }
+
+    @Test
+    public void diamondFlushShouldFlushHandType() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, THREE_DIAMOND, FOUR_DIAMOND, FIVE_DIAMOND, EIGHT_DIAMOND);
+        HandType flushHandType = firstHand.getHandType();
+        assertTrue(flushHandType instanceof Flush);
+    }
+
+    @Test
+    public void straightFlushShouldReturnTrue() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, THREE_DIAMOND, FOUR_DIAMOND, FIVE_DIAMOND, SIX_DIAMOND);
+        boolean isStraightFlush = firstHand.isStraightFlush();
+        assertEquals(true, isStraightFlush);
+    }
+    @Test
+    public void straightFlushHandShouldReturnStraightFlushHandType() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, THREE_DIAMOND, FOUR_DIAMOND, FIVE_DIAMOND, SIX_DIAMOND);
+        HandType flushHandType = firstHand.getHandType();
+        assertTrue(flushHandType instanceof StraightFlush);
+    }
+
+    @Test
+    public void fourOfAKindShouldReturnTrue() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, TWO_HEART, TWO_SPADE, TWO_CLUB, SIX_DIAMOND);
+        boolean isFourOfAKind = firstHand.isFourOfAKind();
+        assertEquals(true, isFourOfAKind);
+    }
+
+    @Test
+    public void fourOfAKindHandShouldReturnFourOfAKindHandType() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, TWO_CLUB, TWO_SPADE, TWO_HEART, SIX_DIAMOND);
+        HandType fourOfAKind = firstHand.getHandType();
+        assertTrue(fourOfAKind instanceof FourOfAKind);
+    }
+
+    @Test
+    public void threeOfAKindShouldReturnTrue() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, TWO_HEART, TWO_SPADE, SEVEN_CLUB, SIX_DIAMOND);
+        boolean isThreeOfAKind = firstHand.isThreeOfAKind();
+        assertEquals(true, isThreeOfAKind);
+    }
+
+    @Test
+    public void threeOfAKindHandShouldReturnFourOfAKindHandType() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, TWO_CLUB, TWO_SPADE, SEVEN_CLUB, SIX_DIAMOND);
+        HandType threeOfAKind = firstHand.getHandType();
+        assertTrue(threeOfAKind instanceof ThreeOfAKind);
+    }
+
+    @Test
+    public void fullHouseShouldReturnTrue() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, TWO_HEART, TWO_SPADE, SEVEN_CLUB, SEVEN_DIAMOND);
+        boolean isFullHouse = firstHand.isFullHouse();
+        assertEquals(true, isFullHouse);
+    }
+
+    @Test
+    public void twoPairsShouldReturnTrue() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, TWO_HEART, TEN_HEART, SEVEN_CLUB, SEVEN_DIAMOND);
+        boolean hasTwoPairs = firstHand.hasTwoPairs();
+        assertEquals(true, hasTwoPairs);
+    }
+
+    @Test
+    public void fullHouseHandShouldReturnFullHouseHandType() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, TWO_CLUB, TWO_SPADE, SEVEN_CLUB, SEVEN_DIAMOND);
+        HandType fullHouseType = firstHand.getHandType();
+        assertTrue(fullHouseType instanceof FullHouse);
+    }
+
+    @Test
+    public void twoPairsHouseHandShouldReturnTwoPairsHandType() throws Exception {
+        PokerHand firstHand = new PokerHand(TWO_DIAMOND, TWO_CLUB, TEN_HEART, SEVEN_CLUB, SEVEN_DIAMOND);
+        HandType twoPairsType = firstHand.getHandType();
+        assertTrue(twoPairsType instanceof TwoPair);
+    }
+}
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/PokerPairTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/PokerPairTest.java
new file mode 100644
index 0000000..67c41ef
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/PokerPairTest.java
@@ -0,0 +1,44 @@
+package pokerhand;
+
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static pokerhand.model.Card.*;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class PokerPairTest {
+
+    @Test
+    public void pairOf2sShouldReturnSame() throws Exception {
+        HandType firstHandType = new PokerPair(JACK_CLUB, EIGHT_DIAMOND, SIX_HEART, TWO_HEART, TWO_DIAMOND);
+        HandType secondHandType = new PokerPair(JACK_HEART, EIGHT_HEART, SIX_SPADE, TWO_CLUB, TWO_SPADE);
+        int ordinal = firstHandType.compareTo(secondHandType);
+        assertEquals(0, ordinal);
+    }
+
+    @Test
+    public void pairOf3sShouldHigherPairOf2s() throws Exception {
+        HandType firstHandType = new PokerPair(JACK_CLUB, EIGHT_DIAMOND, SIX_HEART, THREE_CLUB, THREE_HEART);
+        HandType secondHandType = new PokerPair(JACK_HEART, EIGHT_HEART, SIX_SPADE, TWO_CLUB, TWO_SPADE);
+        int ordinal = firstHandType.compareTo(secondHandType);
+        assertEquals(1, ordinal);
+    }
+
+    @Test
+    public void pairOf2sWithHigherKickerShouldBeHigherPair() throws Exception {
+        HandType firstHandType = new PokerPair(QUEEN_CLUB, EIGHT_DIAMOND, SIX_HEART, TWO_HEART, TWO_DIAMOND);
+        HandType secondHandType = new PokerPair(JACK_HEART, EIGHT_HEART, SIX_SPADE, TWO_CLUB, TWO_SPADE);
+        int ordinal = firstHandType.compareTo(secondHandType);
+        assertEquals(1, ordinal);
+    }
+
+    @Test
+    public void pairOf3sShouldBeHigherPairOf2s() throws Exception {
+        HandType firstHand = new PokerPair(JACK_CLUB, EIGHT_DIAMOND, SIX_HEART, TWO_HEART, TWO_DIAMOND);
+        HandType secondHand = new PokerPair(EIGHT_DIAMOND, TEN_HEART, SIX_HEART, THREE_HEART, THREE_CLUB);
+        int ordinal = firstHand.compareTo(secondHand);
+        assertEquals("pair of 3 should be higher than pair of 2", -1, ordinal);
+    }
+}
\ No newline at end of file
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/StraightFlushTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/StraightFlushTest.java
new file mode 100644
index 0000000..d6eaeb6
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/StraightFlushTest.java
@@ -0,0 +1,28 @@
+package pokerhand;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static pokerhand.model.Card.*;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class StraightFlushTest {
+
+    @Test
+    public void aceHighStraightFlushShouldBeHigherThanKingHighStraightFlush() throws Exception {
+        HandType aceStraightFlush = new StraightFlush(KING_CLUB, ACE_CLUB, QUEEN_CLUB, JACK_CLUB, TEN_CLUB);
+        HandType kingStraightFlush = new StraightFlush(KING_HEART, QUEEN_HEART, JACK_HEART, TEN_HEART, NINE_HEART);
+        int ordinal = aceStraightFlush.compareTo(kingStraightFlush);
+        assertEquals(1, ordinal);
+    }
+
+    @Test
+    public void aceHighStraightFlushShouldBeSameAsAceHighStraightFlush() throws Exception {
+        HandType aceStraightFlush = new StraightFlush(KING_CLUB, ACE_CLUB, QUEEN_CLUB, JACK_CLUB, TEN_CLUB);
+        HandType kingStraightFlush = new StraightFlush(KING_HEART, QUEEN_HEART, JACK_HEART, TEN_HEART, ACE_HEART);
+        int ordinal = aceStraightFlush.compareTo(kingStraightFlush);
+        assertEquals(0, ordinal);
+    }
+}
\ No newline at end of file
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/StraightTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/StraightTest.java
new file mode 100644
index 0000000..955dea4
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/StraightTest.java
@@ -0,0 +1,35 @@
+package pokerhand;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static pokerhand.model.Card.*;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class StraightTest {
+    @Test
+    public void shouldReturnSameStraight2To6() throws Exception {
+        HandType firstStraight = new Straight(TWO_CLUB, THREE_DIAMOND, FOUR_HEART, FIVE_SPADE, SIX_SPADE);
+        HandType secondStraight = new Straight(TWO_HEART, THREE_DIAMOND, FOUR_HEART, FIVE_SPADE, SIX_SPADE);
+        int ordinal = firstStraight.compareTo(secondStraight);
+        assertEquals(0, ordinal);
+    }
+
+    @Test
+    public void twoTo6StraightShouldBeLower3To7() throws Exception {
+        HandType firstStraight = new Straight(TWO_CLUB, THREE_DIAMOND, FOUR_HEART, FIVE_SPADE, SIX_SPADE);
+        HandType secondStraight = new Straight(THREE_DIAMOND, FOUR_HEART, FIVE_SPADE, SIX_SPADE, SEVEN_CLUB);
+        int ordinal = firstStraight.compareTo(secondStraight);
+        assertEquals(-1, ordinal);
+    }
+
+    @Test
+    public void twoTo6StraightShouldBeHigherAceTo5() throws Exception {
+        HandType firstStraight = new Straight(TWO_CLUB, THREE_DIAMOND, FOUR_HEART, FIVE_SPADE, SIX_SPADE);
+        HandType secondStraight = new Straight(ACE_CLUB, TWO_DIAMOND, THREE_DIAMOND, FOUR_HEART, FIVE_SPADE);
+        int ordinal = firstStraight.compareTo(secondStraight);
+        assertEquals(1, ordinal);
+    }
+}
\ No newline at end of file
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/ThreeOfAKindTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/ThreeOfAKindTest.java
new file mode 100644
index 0000000..c211968
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/ThreeOfAKindTest.java
@@ -0,0 +1,44 @@
+package pokerhand;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static pokerhand.model.Card.*;
+import static pokerhand.model.Card.SIX_SPADE;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class ThreeOfAKindTest {
+    @Test
+    public void shouldReturnSameThreeOfAKind() throws Exception {
+        HandType firstThree2s = new ThreeOfAKind(TWO_HEART, TWO_CLUB, TWO_DIAMOND, SEVEN_CLUB, SIX_SPADE);
+        HandType secondThree2s = new ThreeOfAKind(TWO_HEART, TWO_CLUB, TWO_DIAMOND, SEVEN_CLUB, SIX_SPADE);
+        int ordinal = firstThree2s.compareTo(secondThree2s);
+        assertEquals(0, ordinal);
+    }
+
+    @Test
+    public void three3sShouldBeHigherThan32s() throws Exception {
+        HandType threethree = new ThreeOfAKind(THREE_CLUB, THREE_HEART, THREE_DIAMOND, SEVEN_CLUB, SIX_SPADE);
+        HandType three2s = new ThreeOfAKind(TWO_HEART, TWO_CLUB, TWO_DIAMOND, NINE_HEART, SIX_SPADE);
+        int ordinal = threethree.compareTo(three2s);
+        assertEquals(1, ordinal);
+    }
+
+    @Test
+    public void nineKickerShouldBeHigherThan7Kicker() throws Exception {
+        HandType threethree = new ThreeOfAKind(THREE_CLUB, THREE_HEART, THREE_DIAMOND, SEVEN_CLUB, SIX_SPADE);
+        HandType three2s = new ThreeOfAKind(THREE_CLUB, THREE_HEART, THREE_DIAMOND, NINE_HEART, SIX_SPADE);
+        int ordinal = threethree.compareTo(three2s);
+        assertTrue(ordinal < 0);
+    }
+
+    @Test
+    public void sevenKickerShouldBeLowerThan9Kicker() throws Exception {
+        HandType sevenKicker = new ThreeOfAKind(THREE_CLUB, THREE_HEART, THREE_DIAMOND, SEVEN_CLUB, SIX_SPADE);
+        HandType nineKicker = new ThreeOfAKind(THREE_CLUB, THREE_HEART, THREE_DIAMOND, NINE_HEART, SIX_SPADE);
+        int ordinal = nineKicker.compareTo(sevenKicker);
+        assertTrue(ordinal > 0);
+    }
+}
\ No newline at end of file
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/TwoPairTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/TwoPairTest.java
new file mode 100644
index 0000000..36febc9
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/TwoPairTest.java
@@ -0,0 +1,35 @@
+package pokerhand;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static pokerhand.model.Card.*;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class TwoPairTest {
+    @Test
+    public void pairOf2sShouldReturnSame() throws Exception {
+        HandType firstHandType = new TwoPair(JACK_CLUB, SIX_CLUB, SIX_HEART, TWO_HEART, TWO_DIAMOND);
+        HandType secondHandType = new TwoPair(JACK_HEART, SIX_DIAMOND, SIX_SPADE, TWO_CLUB, TWO_SPADE);
+        int ordinal = firstHandType.compareTo(secondHandType);
+        assertEquals(0, ordinal);
+    }
+
+    @Test
+    public void pairSevenKickerShouldReturnHigherPairSixKicker() throws Exception {
+        HandType pairSevenKicker = new TwoPair(JACK_CLUB, SEVEN_CLUB, SEVEN_HEART, TWO_HEART, TWO_DIAMOND);
+        HandType pairSixKickerHandType = new TwoPair(JACK_HEART, SIX_DIAMOND, SIX_SPADE, TWO_CLUB, TWO_SPADE);
+        int ordinal = pairSevenKicker.compareTo(pairSixKickerHandType);
+        assertEquals(1, ordinal);
+    }
+
+    @Test
+    public void jackKickerShouldReturnHigherTenKicker() throws Exception {
+        HandType pairSevenKicker = new TwoPair(JACK_CLUB, SEVEN_CLUB, SEVEN_HEART, TWO_HEART, TWO_DIAMOND);
+        HandType pairSixKickerHandType = new TwoPair(TEN_SPADE, TWO_CLUB, TWO_SPADE, SEVEN_DIAMOND, SEVEN_SPADE);
+        int ordinal = pairSevenKicker.compareTo(pairSixKickerHandType);
+        assertEquals(1, ordinal);
+    }
+}
\ No newline at end of file
diff --git a/tdd/pokerhands/java/src/test/java/pokerhand/model/CardTest.java b/tdd/pokerhands/java/src/test/java/pokerhand/model/CardTest.java
new file mode 100644
index 0000000..74a7f8a
--- /dev/null
+++ b/tdd/pokerhands/java/src/test/java/pokerhand/model/CardTest.java
@@ -0,0 +1,29 @@
+package pokerhand.model;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Created by Tony on 9/18/2016.
+ */
+public class CardTest {
+
+    @Test
+    public void threeClubShouldSameAs3Heart() throws Exception {
+        int ordinal = Card.THREE_CLUB.compareTo(Card.THREE_DIAMOND);
+        assertEquals("3 club should be ranked same as 3 diamond", 0, ordinal);
+    }
+
+    @Test
+    public void threeClubShouldHigher2Heart() throws Exception {
+        int ordinal = Card.THREE_CLUB.compareTo(Card.TWO_HEART);
+        assertEquals("3 club should be ranked same as 3 diamond", 1, ordinal);
+    }
+
+    @Test
+    public void threeClubShouldLower4Heart() throws Exception {
+        int ordinal = Card.THREE_CLUB.compareTo(Card.FOUR_HEART);
+        assertEquals("3 club should be ranked same as 3 diamond", -1, ordinal);
+    }
+}
\ No newline at end of file
diff --git a/tdd/pokerhands/java/src/test/java/pokerhands/PokerHandsTest.java b/tdd/pokerhands/java/src/test/java/pokerhands/PokerHandsTest.java
deleted file mode 100644
index 986a72c..0000000
--- a/tdd/pokerhands/java/src/test/java/pokerhands/PokerHandsTest.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package pokerhands;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-/**
- * Created by Tony on 1/15/2016.
- */
-public class PokerHandsTest {
-
-    @Test
-    public void sampleTest() throws Exception {
-        Assert.assertTrue("First dummy test", false);
-    }
-}
